/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Main;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author user
 */
public class ViewTimeTable extends javax.swing.JFrame {

    /**
     * Creates new form ViewTimeTable
     */
    ResultSet rs;
    public ViewTimeTable() {
        initComponents();
        try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblViewTimeTable = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        cmbCLASSES = new javax.swing.JComboBox<>();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblViewTimeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Day", "Time", "Subject Name", "Teacher Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblViewTimeTable);

        btnBack.setText("<---");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        cmbCLASSES.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "[...Select One..]", "Class 1", "Class 2", "Class 3", "Class 4", "Class 5", "Class 6", "Class 7", "Class 8", "Class 9", "Class 10" }));
        cmbCLASSES.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cmbCLASSESMouseClicked(evt);
            }
        });
        cmbCLASSES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCLASSESActionPerformed(evt);
            }
        });
        cmbCLASSES.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                cmbCLASSESKeyPressed(evt);
            }
        });

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 507, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(cmbCLASSES, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSearch)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 72, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(39, 39, 39))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnBack)
                    .addComponent(cmbCLASSES, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        new TimeTableManagementFrame().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btnBackActionPerformed

    private void cmbCLASSESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCLASSESActionPerformed
        // TODO add your handling code here:
        if(cmbCLASSES.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Select Class to see the timetable");
            }
        else if(cmbCLASSES.getSelectedIndex() == 0){
            
            
        }
    }//GEN-LAST:event_cmbCLASSESActionPerformed

    private void cmbCLASSESMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cmbCLASSESMouseClicked
        // TODO add your handling code here:
        if(cmbCLASSES.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Select Class to see the timetable");
            }
        else if(cmbCLASSES.getSelectedIndex() == 0){
            
            
        }
    }//GEN-LAST:event_cmbCLASSESMouseClicked

    private void cmbCLASSESKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_cmbCLASSESKeyPressed
        // TODO add your handling code here:
        if(cmbCLASSES.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Select Class to see the timetable");
            }
        else if(cmbCLASSES.getSelectedIndex() == 0){
            
            
        }
    }//GEN-LAST:event_cmbCLASSESKeyPressed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
         if(cmbCLASSES.getSelectedIndex() == 0){
            JOptionPane.showMessageDialog(this, "Select Class to see the timetable");
            }
        else if(cmbCLASSES.getSelectedIndex() == 1){
            try {
            
            Connection conn = DB.getConnection();
            String query = "SELECT " +
                  "timetable.day, " +
                  "timetable.time, " +
                  "subjects.subject_name, " +
                  "teachers.first_name AS teacher_name " +
                  "FROM " +
                  "timetable " +
                  "INNER JOIN " +
                  "classes ON classes.class_id = timetable.class_id " +
                  "INNER JOIN " +
                  "subjects ON subjects.subject_id = timetable.subject_id " +
                  "INNER JOIN " +
                  "teachers ON teachers.teacher_id = timetable.teacher_id " +
                  "WHERE " +
                  "classes.class_id = 1 " +
                  "ORDER BY " +
                  "timetable.day, timetable.time;";
 

            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
            tbl.setRowCount(0);
              rs = stmt.executeQuery();
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         else if(cmbCLASSES.getSelectedIndex() == 2){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 2\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         
         else if(cmbCLASSES.getSelectedIndex() == 3){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 3\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         
         else if(cmbCLASSES.getSelectedIndex() == 4){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 4\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         
         else if(cmbCLASSES.getSelectedIndex() == 5){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 5\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         
         else if(cmbCLASSES.getSelectedIndex() == 6){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 6\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         
         else if(cmbCLASSES.getSelectedIndex() == 7){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 7\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         
         else if(cmbCLASSES.getSelectedIndex() == 8){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 8\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         
         else if(cmbCLASSES.getSelectedIndex() == 9){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 9\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }
         
         else if(cmbCLASSES.getSelectedIndex() == 10){
            try {
            Connection conn = DB.getConnection();
            String query = "SELECT \n" +
"    timetable.day, \n" +
"    timetable.time, \n" +
"    subjects.subject_name, \n" +
"    teachers.first_name AS teacher_name\n" +
"FROM \n" +
"    timetable\n" +
"INNER JOIN \n" +
"    classes ON classes.class_id = timetable.class_id\n" +
"INNER JOIN \n" +
"    subjects ON subjects.subject_id = timetable.subject_id\n" +
"INNER JOIN \n" +
"    teachers ON teachers.teacher_id = timetable.teacher_id\n" +
"WHERE \n" +
"    classes.class_id = 10\n" +
"ORDER BY \n" +
"    timetable.day, timetable.time;";
            PreparedStatement stmt = conn.prepareStatement(query);
            DefaultTableModel tbl = (DefaultTableModel) tblViewTimeTable.getModel();
              rs = stmt.executeQuery();
              tbl.setRowCount(0);
             while(rs.next()){
                 String data[]={rs.getString(1),rs.getString(2),rs.getString(3),rs.getString(4)};
                 tbl.addRow(data);
             }
           
        } catch (SQLException ex) {
            ex.printStackTrace();
                        System.out.println(ex);
            JOptionPane.showMessageDialog(null, "Error retrieving Time Table");
        }
            
             }else{
             JOptionPane.showMessageDialog(this, "invalid class selected");
         }
         
    }//GEN-LAST:event_btnSearchActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnSearch;
    private javax.swing.JComboBox<String> cmbCLASSES;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblViewTimeTable;
    // End of variables declaration//GEN-END:variables
}
